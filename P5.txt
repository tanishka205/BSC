#CATS AND DOG
import tensorflow as tf, os, zipfile, matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16

# Download & extract dataset
url="https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip"
path=tf.keras.utils.get_file("cats_and_dogs.zip",url,cache_dir=os.getcwd())
with zipfile.ZipFile(path,"r") as z: z.extractall(os.getcwd())

train_dir=os.path.join(os.getcwd(),"cats_and_dogs_filtered/train")
val_dir=os.path.join(os.getcwd(),"cats_and_dogs_filtered/validation")

# Data generators
train_gen=ImageDataGenerator(rescale=1./255,rotation_range=20,width_shift_range=0.2,
    height_shift_range=0.2,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)
val_gen=ImageDataGenerator(rescale=1./255)

train_ds=train_gen.flow_from_directory(train_dir,batch_size=20,class_mode="binary",target_size=(150,150))
val_ds=val_gen.flow_from_directory(val_dir,batch_size=20,class_mode="binary",target_size=(150,150))

# Model
base=VGG16(weights="imagenet",include_top=False,input_shape=(150,150,3))
base.trainable=False
model=tf.keras.Sequential([
    base,
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256,activation="relu"),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1,activation="sigmoid")
])
model.compile(loss="binary_crossentropy",optimizer=tf.keras.optimizers.RMSprop(2e-5),metrics=["accuracy"])

# Train
hist=model.fit(train_ds,steps_per_epoch=100,epochs=30,validation_data=val_ds,validation_steps=50)

# Predictions
x,y=next(val_ds)
preds=model.predict(x)
class_names=["cat","dog"]
plt.figure(figsize=(12, 12))
for i in range(len(x)):
    plt.subplot(4, 5, i+1)  # 4 rows Ã— 5 cols = 20 images (batch_size=20)
    plt.imshow(x[i])
    plt.axis("off")
    pred = class_names[int(preds[i][0]>0.5)]
    true = class_names[int(y[i])]
    plt.title(f'P:{pred} T:{true}')
plt.tight_layout()
plt.show()

# Plot metrics
plt.plot(hist.history["accuracy"],label="Train Acc")
plt.plot(hist.history["val_accuracy"],label="Val Acc")
plt.plot(hist.history["loss"],label="Train Loss")
plt.plot(hist.history["val_loss"],label="Val Loss")
plt.legend()
plt.show()